#include <bits/stdc++.h>
using namespace std;
bool isPrime(int n, int q){
    n+=q;
    if (n==2){
        return true;
    }
    for (int i = 2; i < ((int)sqrt(n))+1; i++){
        if (n%i==0){
            return false;
        }
    }
    return true;
}
int main(){
    int n, q;
    cin >> n >> q;
    vector<int> d(n);
    vector<int> quir(q, 0);
    for (int i = 0; i < n; i++){
        cin >> d[i];
    }
    for (int i = 0; i < q; i++){
        int temp;
        cin >> temp;
        int cnt = 0;
        for (int j = 0; j < n; j++){
            if (isPrime(d[j], temp)){
                cnt++;
            }
        }
        if (cnt<=n){
            quir[i] = 1;
        }
    }
    for (int i = 0; i < q; i++){
        if (quir[i]){
            cout << "YES\n";
        }
        else{
            cout << "NO\n";
        }
    }
    
}





Right answer:
#include <bits/stdc++.h>

using namespace std;
const int N = int(2e5) + 10, mod = int(1e9) + 7;
int n, q, a[N], was[N];
vector<int> d[N];

int main()
{
    int t = 1;
    cin.tie(NULL);
    cout.tie(NULL);
    ios_base::sync_with_stdio(false);
    
    cin >> n >> q;
    for(int i = 0; i < n; i++){
        cin >> a[i];
    }
    
    for (int i = 2; i < N; i++){
        if (d[i].empty()){
            for (int j = i; j < N; j+=i){
                d[j].push_back(i);
            }
        }
    }
    
    for(int it = 1,x; it <= q; it++){
        cin >> x;
        bool f = 0;
        for(int i = 0; i < n && !f; i++){
            for(int p : d[a[i] + x]){
                if (was[p] == it){
                    f = 1;
                    break;
                }
                was[p] = it;
            }
        }
        if(f) cout << "NO\n";
        else cout << "YES\n";
    }
    return 0;
}














